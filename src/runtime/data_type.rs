use std::ffi::CStr;

use num::FromPrimitive;

use super::bind::*;

#[repr(i32)]
#[derive(Debug, FromPrimitive)]
pub enum ComputeMode {
    Default = 0,
    Exclusive = 1,
    Prohibited = 2,
    ExclusiveProcess = 3,
}

#[derive(Debug)]
pub struct DeviceProp {
    pub name: String,
    pub total_global_mem: usize,
    pub shared_mem_per_block: usize,
    pub regs_per_block: i32,
    pub warp_size: i32,
    pub mem_pitch: usize,
    pub max_threads_per_block: i32,
    pub max_threads_dim: [i32; 3],
    pub max_grid_size: [i32; 3],
    pub clock_rate: i32,
    pub total_const_mem: usize,
    pub major: i32,
    pub minor: i32,
    pub texture_alignment: usize,
    pub texture_pitch_alignment: usize,
    pub device_overlap: bool,
    pub multi_processor_count: i32,
    pub kernel_exec_timeout_enabled: bool,
    pub integrated: bool,
    pub can_map_host_memory: bool,
    pub compute_mode: ComputeMode,
    pub max_texture1d: i32,
    pub max_texture1d_mipmap: i32,
    pub max_texture1d_linear: i32,
    pub max_texture2d: [i32; 2],
    pub max_texture2d_mipmap: [i32; 2],
    pub max_texture2d_linear: [i32; 3],
    pub max_texture2d_gather: [i32; 2],
    pub max_texture3d: [i32; 3],
    pub max_texture3d_alt: [i32; 3],
    pub max_texture_cubemap: i32,
    pub max_texture1d_layered: [i32; 2],
    pub max_texture2d_layered: [i32; 3],
    pub max_texture_cubemap_layered: [i32; 2],
    pub max_surface1d: i32,
    pub max_surface2d: [i32; 2],
    pub max_surface3d: [i32; 3],
    pub max_surface1d_layered: [i32; 2],
    pub max_surface2d_layered: [i32; 3],
    pub max_surface_cubemap: i32,
    pub max_surface_cubemap_layered: [i32; 2],
    pub surface_alignment: usize,
    pub concurrent_kernels: bool,
    pub ecc_enabled: bool,
    pub pci_bus_id: i32,
    pub pci_device_id: i32,
    pub pci_domain_id: i32,
    pub tcc_driver: bool,
    pub async_engine_count: i32,
    pub unified_addressing: bool,
    pub memory_clock_rate: i32,
    pub memory_bus_width: i32,
    pub l2_cache_size: i32,
    pub max_threads_per_multi_processor: i32,
    pub stream_priorities_supported: bool,
    pub global_l1_cache_supported: bool,
    pub local_l1_cache_supported: bool,
    pub shared_mem_per_multiprocessor: usize,
    pub regs_per_multiprocessor: i32,
    pub managed_memory: bool,
    pub is_multi_gpu_board: bool,
    pub multi_gpu_board_group_id: i32,
    pub host_native_atomic_supported: bool,
    pub single_to_double_precision_perf_ratio: i32,
    pub pageable_memory_access: bool,
    pub concurrent_managed_access: bool,
    pub compute_preemption_supported: bool,
    pub can_use_host_pointer_for_registered_mem: bool,
    pub cooperative_launch: bool,
    pub cooperative_multidevice_launch: bool,
    pub shared_mem_per_block_optin: usize,
    pub pageable_memory_access_uses_host_page_tables: bool,
    pub direct_managed_mem_access_from_host: bool,
}

impl DeviceProp {
    pub fn from(prop: &cudaDeviceProp) -> Self {
        DeviceProp {
            name: unsafe {
                CStr::from_ptr(&prop.name[0] as *const i8)
                    .to_str()
                    .unwrap()
                    .to_owned()
            },
            total_global_mem: prop.totalGlobalMem,
            shared_mem_per_block: prop.sharedMemPerBlock,
            regs_per_block: prop.regsPerBlock,
            warp_size: prop.warpSize,
            mem_pitch: prop.memPitch,
            max_threads_per_block: prop.maxThreadsPerBlock,
            max_threads_dim: prop.maxThreadsDim,
            max_grid_size: prop.maxGridSize,
            clock_rate: prop.clockRate,
            total_const_mem: prop.totalConstMem,
            major: prop.major,
            minor: prop.minor,
            texture_alignment: prop.textureAlignment,
            texture_pitch_alignment: prop.texturePitchAlignment,
            device_overlap: prop.deviceOverlap == 1,
            multi_processor_count: prop.multiProcessorCount,
            kernel_exec_timeout_enabled: prop.kernelExecTimeoutEnabled == 1,
            integrated: prop.integrated == 1,
            can_map_host_memory: prop.canMapHostMemory == 1,
            compute_mode: ComputeMode::from_i32(prop.computeMode).unwrap(),
            max_texture1d: prop.maxTexture1D,
            max_texture1d_mipmap: prop.maxTexture1DMipmap,
            max_texture1d_linear: prop.maxTexture1DLinear,
            max_texture2d: prop.maxTexture2D,
            max_texture2d_mipmap: prop.maxTexture2DMipmap,
            max_texture2d_linear: prop.maxTexture2DLinear,
            max_texture2d_gather: prop.maxTexture2DGather,
            max_texture3d: prop.maxTexture3D,
            max_texture3d_alt: prop.maxTexture3DAlt,
            max_texture_cubemap: prop.maxTextureCubemap,
            max_texture1d_layered: prop.maxTexture1DLayered,
            max_texture2d_layered: prop.maxTexture2DLayered,
            max_texture_cubemap_layered: prop.maxTextureCubemapLayered,
            max_surface1d: prop.maxSurface1D,
            max_surface2d: prop.maxSurface2D,
            max_surface3d: prop.maxSurface3D,
            max_surface1d_layered: prop.maxSurface1DLayered,
            max_surface2d_layered: prop.maxSurface2DLayered,
            max_surface_cubemap: prop.maxSurfaceCubemap,
            max_surface_cubemap_layered: prop.maxSurfaceCubemapLayered,
            surface_alignment: prop.surfaceAlignment,
            concurrent_kernels: prop.concurrentKernels == 1,
            ecc_enabled: prop.ECCEnabled == 1,
            pci_bus_id: prop.pciBusID,
            pci_device_id: prop.pciDeviceID,
            pci_domain_id: prop.pciDomainID,
            tcc_driver: prop.tccDriver == 1,
            async_engine_count: prop.asyncEngineCount,
            unified_addressing: prop.unifiedAddressing == 1,
            memory_clock_rate: prop.memoryClockRate,
            memory_bus_width: prop.memoryBusWidth,
            l2_cache_size: prop.l2CacheSize,
            max_threads_per_multi_processor: prop.maxThreadsPerMultiProcessor,
            stream_priorities_supported: prop.streamPrioritiesSupported == 1,
            global_l1_cache_supported: prop.globalL1CacheSupported == 1,
            local_l1_cache_supported: prop.localL1CacheSupported == 1,
            shared_mem_per_multiprocessor: prop.sharedMemPerMultiprocessor,
            regs_per_multiprocessor: prop.regsPerMultiprocessor,
            managed_memory: prop.managedMemory == 1,
            is_multi_gpu_board: prop.isMultiGpuBoard == 1,
            multi_gpu_board_group_id: prop.multiGpuBoardGroupID,
            host_native_atomic_supported: prop.hostNativeAtomicSupported == 1,
            single_to_double_precision_perf_ratio: prop.singleToDoublePrecisionPerfRatio,
            pageable_memory_access: prop.pageableMemoryAccess == 1,
            concurrent_managed_access: prop.concurrentManagedAccess == 1,
            compute_preemption_supported: prop.computePreemptionSupported == 1,
            can_use_host_pointer_for_registered_mem: prop.canUseHostPointerForRegisteredMem == 1,
            cooperative_launch: prop.cooperativeLaunch == 1,
            cooperative_multidevice_launch: prop.cooperativeMultiDeviceLaunch == 1,
            shared_mem_per_block_optin: prop.sharedMemPerBlockOptin,
            pageable_memory_access_uses_host_page_tables: prop
                .pageableMemoryAccessUsesHostPageTables
                == 1,
            direct_managed_mem_access_from_host: prop.directManagedMemAccessFromHost == 1,
        }
    }
}
